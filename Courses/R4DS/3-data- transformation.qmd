---
title: "3_Data transformation"
format: html
editor: visual
---

## **3.1 Introduction**

it\'s rare that you get the data in exactly the right form you need to make the graph you want. Often you\'ll need to create some new variables or summaries to answer your questions with your data, or maybe you just want to rename the variables or reorder the observations to make the data a little easier to work with.

We will introduce you to data transformation using the **dplyr** package and a new dataset on flights that departed from New York City in 2013.

**3.1.1 Prerequisites**

dplyr package

nycflights13 package,

 ggplot2

Take careful note of the conflicts message that\'s printed when you load the tidyverse. It tells you that dplyr overwrites some functions in base R. If you want to use the base version of these functions after loading dplyr, you\'ll need to use their full names: [stats::filter()](https://rdrr.io/r/stats/filter.html) and [stats::lag()](https://rdrr.io/r/stats/lag.html).

**3.1.2 nycflights13**

To explore the basic dplyr verbs, we\'re going to use [nycflights13::flights](https://rdrr.io/pkg/nycflights13/man/flights.html). This dataset contains all 336,776 flights that departed from New York City in 2013. The data comes from the US [Bureau of Transportation Statistics](https://www.transtats.bts.gov/DL_SelectFields.aspx?gnoyr_VQ=FGJ&QO_fu146_anzr=b0-gvzr), and is documented in [?flights](https://rdrr.io/pkg/nycflights13/man/flights.html).

View(flights)

print(flights, width = Inf)

[glimpse(flights)](https://pillar.r-lib.org/reference/glimpse.html)

type of each variable:

\<int\> is short for integer,

 \<dbl\> is short for double (aka real numbers),

 \<chr\> for character (aka strings),

and \<dttm\> for date-time.

These are important because the operations you can perform on a column depend so much on its \"type\".

**3.1.3 dplyr basics**

primary dplyr verbs (functions) have in common:

1.  

2.  1- The first argument is always a data frame.

3.  

4.  2- The subsequent arguments typically describe which columns to operate on, using the variable names (without quotes).

5.  

6.  3- The output is always a new data frame.

7.  

Because each verb does one thing well, solving complex problems will usually require combining multiple verbs, and we\'ll do so with the pipe, \|\>.

In brief, the pipe takes the thing on its left and passes it along to the function on its right.

The easiest way to pronounce the pipe is \"then\".

dplyr\'s verbs are organized into four groups based on what they operate on: **rows**, **columns**, **groups**, or **tables**.

**3.2 Rows**

[filter()](https://dplyr.tidyverse.org/reference/filter.html), which changes which rows are present without changing their order,

[arrange()](https://dplyr.tidyverse.org/reference/arrange.html), which changes the order of the rows without changing which are present

Both functions only affect the rows, and the columns are left unchanged.

[distinct()](https://dplyr.tidyverse.org/reference/distinct.html) which finds rows with unique values but unlike [arrange()](https://dplyr.tidyverse.org/reference/arrange.html) and [filter()](https://dplyr.tidyverse.org/reference/filter.html) it can also optionally modify the columns.

**3.2.1 filter()**

[filter()](https://dplyr.tidyverse.org/reference/filter.html) allows you to keep rows based on the values of the columns[1](https://r4ds.hadley.nz/data-transform#fn1). The first argument is the data frame. The second and subsequent arguments are the conditions that must be true to keep the row.

flights\|\>  [filter](https://dplyr.tidyverse.org/reference/filter.html)(dep_delay\>120)

There\'s a useful shortcut when you\'re combining \| and ==: %in%.

It keeps rows where the variable equals one of the values on the right:

\# A shorter way to select flights that departed in January or February

flights\|\>  [filter](https://dplyr.tidyverse.org/reference/filter.html)(month[%in%](https://rdrr.io/r/base/match.html)[c](https://rdrr.io/r/base/c.html)(1, 2))

When you run [filter()](https://dplyr.tidyverse.org/reference/filter.html) dplyr executes the filtering operation, creating a new data frame, and then prints it. It doesn\'t modify the existing flights dataset because dplyr functions never modify their inputs. To save the result, you need to use the assignment operator, \<-:

jan1\<-flights\|\>  [filter](https://dplyr.tidyverse.org/reference/filter.html)(month==1&day==1)

**3.2.2 Common mistakes**

use = instead of ==

write \"or\" statements like you would in English:

Flights \|\>  [filter](https://dplyr.tidyverse.org/reference/filter.html)(month == 1 \| 2)

This \"works\", in the sense that it doesn\'t throw an error, but it doesn\'t do what you want because \| first checks the condition month == 1 and then checks the condition 2, which is not a sensible condition to check.

**3.2.3 arrange()**

[arrange()](https://dplyr.tidyverse.org/reference/arrange.html) changes the order of the rows based on the value of the columns. It takes a data frame and a set of column names (or more complicated expressions) to order by. If you provide more than one column name, each additional column will be used to break ties in the values of preceding columns.

flights \|\>

  arrange(year, month, day, dep_time)

You can use [desc()](https://dplyr.tidyverse.org/reference/desc.html) on a column inside of [arrange()](https://dplyr.tidyverse.org/reference/arrange.html) to re-order the data frame based on that column in descending (big-to-small) order.

Flights \|\>  [arrange](https://dplyr.tidyverse.org/reference/arrange.html)([desc](https://dplyr.tidyverse.org/reference/desc.html)(dep_delay))

Note that the number of rows has not changed -- we\'re only arranging the data, we\'re not filtering it.

**3.2.4 distinct()**

[distinct()](https://dplyr.tidyverse.org/reference/distinct.html) finds all the unique rows in a dataset, so in a technical sense, it primarily operates on the rows. Most of the time, however, you\'ll want the distinct combination of some variables, so you can also optionally supply column names:

\# Remove duplicate rows, if any

flights\|\>  [distinct](https://dplyr.tidyverse.org/reference/distinct.html)()

\# Find all unique origin and destination pairs

flights\|\>  [distinct](https://dplyr.tidyverse.org/reference/distinct.html)(origin, dest)

Alternatively, if you want to the keep other columns when filtering for unique rows, you can use the .

keep_all = TRUE option.

flights\|\>  [distinct](https://dplyr.tidyverse.org/reference/distinct.html)(origin, dest, .keep_all =TRUE)

It\'s not a coincidence that all of these distinct flights are on January 1: [distinct()](https://dplyr.tidyverse.org/reference/distinct.html) will find the first occurrence of a unique row in the dataset and discard the rest.

If you want to find the number of occurrences instead, you\'re better off swapping [distinct()](https://dplyr.tidyverse.org/reference/distinct.html) for [count()](https://dplyr.tidyverse.org/reference/count.html), and with the sort = TRUE argument you can arrange them in descending order of number of occurrences.

flights \|\>

  count(origin, dest, sort = TRUE)

#\> \# A tibble: 224 × 3

#\>   origin dest      n

#\>   \<chr\>  \<chr\> \<int\>

#\> 1 JFK    LAX   11262

#\> 2 LGA    ATL   10263

#\> 3 LGA    ORD    8857

#\> 4 JFK    SFO    8204

#\> 5 LGA    CLT    6168

#\> 6 EWR    ORD    6100

#\> \# ℹ 218 more rows

**3.3 Columns**

There are four important verbs that affect the columns without changing the rows:

[mutate()](https://dplyr.tidyverse.org/reference/mutate.html) creates new columns that are derived from the existing columns,

 [select()](https://dplyr.tidyverse.org/reference/select.html) changes which columns are present,

 [rename()](https://dplyr.tidyverse.org/reference/rename.html) changes the names of the columns, and

 [relocate()](https://dplyr.tidyverse.org/reference/relocate.html) changes the positions of the columns.

**3.3.1 mutate()**

The job of [mutate()](https://dplyr.tidyverse.org/reference/mutate.html) is to add new columns that are calculated from the existing columns.

flights \|\>

  mutate(

\# how much time a delayed flight made up in the air

    gain = dep_delay - arr_delay,

\# the speed in miles per hour

    speed = distance / air_time \* 60

  )

By default, [mutate()](https://dplyr.tidyverse.org/reference/mutate.html) adds new columns on the right hand side of your dataset, which makes it difficult to see what\'s happening here. We can use the .before argument to instead add the variables to the left hand side[2](https://r4ds.hadley.nz/data-transform#fn2):

flights\|\>  [mutate](https://dplyr.tidyverse.org/reference/mutate.html)(    gain =dep_delay-arr_delay,    speed =distance/air_time\*60,    .before =1  )

The . is a sign that .before is an argument to the function, not the name of a third new variable we are creating. You can also use .after to add after a variable, and in both .before and .after you can use the variable name instead of a position. For example, we could add the new variables after day:

flights \|\>

  mutate(

    gain = dep_delay - arr_delay,

    speed = distance / air_time \* 60,

    .after = day

  )

Alternatively, you can control which variables are kept with the .keep argument. A particularly useful argument is "used" which specifies that we only keep the columns that were involved or created in the [mutate()](https://dplyr.tidyverse.org/reference/mutate.html) step.

flights \|\>

  mutate(

    gain = dep_delay - arr_delay,

    hours = air_time / 60,

    gain_per_hour = gain / hours,

    .keep = "used"

  )

Note that since we haven\'t assigned the result of the above computation back to flights, the new variables gain, hours, and gain_per_hour will only be printed but will not be stored in a data frame. And if we want them to be available in a data frame for future use, we should think carefully about whether we want the result to be assigned back to flights, overwriting the original data frame with many more variables, or to a new object. Often, the right answer is a new object that is named informatively to indicate its contents, e.g., delay_gain, but you might also have good reasons for overwriting flights.

**3.3.2 select()**

[select()](https://dplyr.tidyverse.org/reference/select.html) allows you to rapidly zoom in on a useful subset using operations based on the names of the variables:

-   

-   Select columns by name:

-   

flights \|\>

  select(year, month, day)

. Select all columns between year and day (inclusive):

flights \|\>

  select(year:day)

Select all columns except those from year to day (inclusive):

flights \|\>

  select(!year:day)

-   

-   Historically this operation was done with - instead of !, so you\'re likely to see that in the wild. These two operators serve the same purpose but with subtle differences in behavior. We recommend using ! because it reads as \"not\" and combines well with & and \|.

-   

-   Select all columns that are characters:\
    flights\|\> 

-   

-   [select](https://dplyr.tidyverse.org/reference/select.html)([where](https://tidyselect.r-lib.org/reference/where.html)(is.character))

-   

There are a number of helper functions you can use within [select()](https://dplyr.tidyverse.org/reference/select.html):

-   

-   starts_with("abc"): matches names that begin with \"abc\".

-   

-   ends_with("xyz"): matches names that end with \"xyz\".

-   

-   contains("ijk"): matches names that contain \"ijk\".

-   

-   num_range("x", 1:3): matches x1, x2 and x3.

-   

You can rename variables as you [select()](https://dplyr.tidyverse.org/reference/select.html) them by using =.

The new name appears on the left hand side of the =, and the old variable appears on the right hand side:

flights \|\>

  select(tail_num = tailnum)

**3.3.3 rename()**

If you want to keep all the existing variables and just want to rename a few, you can use [rename()](https://dplyr.tidyverse.org/reference/rename.html) instead of [select()](https://dplyr.tidyverse.org/reference/select.html):

flights \|\>

  rename(tail_num = tailnum)

If you have a bunch of inconsistently named columns and it would be painful to fix them all by hand, check out [janitor::clean_names()](https://sfirke.github.io/janitor/reference/clean_names.html) which provides some useful automated cleaning.

**3.3.4 relocate()**

Use [relocate()](https://dplyr.tidyverse.org/reference/relocate.html) to move variables around. You might want to collect related variables together or move important variables to the front. By default [relocate()](https://dplyr.tidyverse.org/reference/relocate.html) moves variables to the front:

flights \|\>

  relocate(time_hour, air_time)

#\> \# A tibble: 336,776 × 19

#\>   time_hour           air_time  year month   day dep_time sched_dep_time

#\>   \<dttm\>                 \<dbl\> \<int\> \<int\> \<int\>    \<int\>          \<int\>

#\> 1 2013-01-01 05:00:00      227  2013     1     1      517            515

You can also specify where to put them using the .before and .after arguments, just like in [mutate()](https://dplyr.tidyverse.org/reference/mutate.html):

flights \|\>

  relocate(year:dep_time, .after = time_hour)

flights \|\>

  relocate(starts_with("arr"), .before = dep_time)

**3.4 The pipe**

We\'ve shown you simple examples of the pipe above, but its real power arises when you start to combine multiple verbs.

For example, imagine that you wanted to find the fast flights to Houston\'s IAH airport: you need to combine [filter()](https://dplyr.tidyverse.org/reference/filter.html), [mutate()](https://dplyr.tidyverse.org/reference/mutate.html), [select()](https://dplyr.tidyverse.org/reference/select.html), and [arrange()](https://dplyr.tidyverse.org/reference/arrange.html):

flights \|\>

  filter(dest == "IAH") \|\>

  mutate(speed = distance / air_time \* 60) \|\>

  select(year:day, dep_time, carrier, flight, speed) \|\>

  arrange(desc(speed))

To add the pipe to your code, we recommend using the built-in keyboard shortcut Ctrl/Cmd + Shift + M. You\'ll need to make one change to your RStudio options to use \|\> instead of %\>% as shown in [Figure 3.1](https://r4ds.hadley.nz/data-transform#fig-pipe-options); more on %\>% shortly.

magrittr

If you\'ve been using the tidyverse for a while, you might be familiar with the %\>% pipe provided by the **magrittr** package. The magrittr package is included in the core tidyverse, so you can use %\>% whenever you load the tidyverse:

library(tidyverse)

mtcars %\>%

  group_by(cyl) %\>%

  summarize(n = n())

we recommend the base pipe? Firstly, because it\'s part of base R, it\'s always available for you to use, even when you\'re not using the tidyverse. Secondly, \|\> is quite a bit simpler than %\>%

**3.5 Groups**

dplyr gets even more powerful when you add in the ability to work with groups. In this section, we\'ll focus on the most important functions:

 [group_by()](https://dplyr.tidyverse.org/reference/group_by.html),

 [summarize()](https://dplyr.tidyverse.org/reference/summarise.html),

and the slice family of functions.

**3.5.1 group_by()**

Use [group_by()](https://dplyr.tidyverse.org/reference/group_by.html) to divide your dataset into groups meaningful for your analysis:

flights \|\>

  group_by(month)

#\> \# A tibble: 336,776 × 19

#\> \# Groups:   month \[12\]

[group_by()](https://dplyr.tidyverse.org/reference/group_by.html) doesn\'t change the data but, if you look closely at the output, you\'ll notice that the output indicates that it is \"grouped by\" month (Groups: month \[12\]). This means subsequent operations will now work \"by month\". [group_by()](https://dplyr.tidyverse.org/reference/group_by.html) adds this grouped feature (referred to as class) to the data frame, which changes the behavior of the subsequent verbs applied to the data.

**3.5.2 summarize()**

The most important grouped operation is a summary, which, if being used to calculate a single summary statistic, reduces the data frame to have a single row for each group.

flights \|\>

  group_by(month) \|\>

  summarize(

    avg_delay = mean(dep_delay)

  )

You can create any number of summaries in a single call to [summarize()](https://dplyr.tidyverse.org/reference/summarise.html), but one very useful summary is [n()](https://dplyr.tidyverse.org/reference/context.html), which returns the number of rows in each group:

flights \|\>

  group_by(month) \|\>

  summarize(

    delay = mean(dep_delay, na.rm = TRUE),

    n = n()

  )

**Means and counts can get you a surprisingly long way in data science!**

**3.5.3 The slice\_ functions**

There are five handy functions that allow you extract specific rows within each group:

-   

-   df \|\> slice_head(n = 1) takes the first row from each group.

-   

-   df \|\> slice_tail(n = 1) takes the last row in each group.

-   

-   df \|\> slice_min(x, n = 1) takes the row with the smallest value of column x.

-   

-   df \|\> slice_max(x, n = 1) takes the row with the largest value of column x.

-   

-   df \|\> slice_sample(n = 1) takes one random row.

-   

You can vary n to select more than one row, or instead of n =, you can use prop = 0.1 to select (e.g.) 10% of the rows in each group.

For example, the following code finds the flights that are most delayed upon arrival at each destination:

flights \|\>

  group_by(dest) \|\>

  slice_max(arr_delay, n = 1) \|\>

  relocate(dest)

#\> \# A tibble: 108 × 19

#\> \# Groups:   dest \[105\]

Note that there are 105 destinations but we get 108 rows here. What\'s up? [slice_min()](https://dplyr.tidyverse.org/reference/slice.html) and [slice_max()](https://dplyr.tidyverse.org/reference/slice.html) keep tied values so n = 1 means give us all rows with the highest value. If you want exactly one row per group you can set with_ties = FALSE.

**3.5.4 Grouping by multiple variables**

You can create groups using more than one variable. For example, we could make a group for each date.

daily \<- flights \|\> 

  group_by(year, month, day)

When you summarize a tibble grouped by more than one variable, each summary peels off the last group. In hindsight, this wasn\'t a great way to make this function work, but it\'s difficult to change without breaking existing code. To make it obvious what\'s happening, dplyr displays a message that tells you how you can change this behavior:

daily_flights \<- daily \|\>

  summarize(n = n())

#\> \`summarise()\` has grouped output by 'year', 'month'. You can override using

#\> the \`.groups\` argument.

If you\'re happy with this behavior, you can explicitly request it in order to suppress the message:

daily_flights \<- daily \|\>

  summarize(

    n = n(),

    .groups = "drop_last"

  )

Alternatively, change the default behavior by setting a different value, e.g., "drop" to drop all grouping or "keep" to preserve the same groups.

**3.5.5 Ungrouping**

You might also want to remove grouping from a data frame without using [summarize()](https://dplyr.tidyverse.org/reference/summarise.html). You can do this with [ungroup()](https://dplyr.tidyverse.org/reference/group_by.html).

daily \|\>

  ungroup()

**3.5.6 .by**

dplyr 1.1.0 includes a new, experimental, syntax for per-operation grouping, the .by argument. [group_by()](https://dplyr.tidyverse.org/reference/group_by.html) and [ungroup()](https://dplyr.tidyverse.org/reference/group_by.html) aren\'t going away, but you can now also use the .by argument to group within a single operation:

flights \|\>

  summarize(

    delay = mean(dep_delay, na.rm = TRUE),

    n = n(),

    .by = month

  )

Or if you want to group by multiple variables:

flights \|\>

  summarize(

    delay = mean(dep_delay, na.rm = TRUE),

    n = n(),

    .by = c(origin, dest)

  )

.by works with all verbs and has the advantage that you don\'t need to use the .groups argument to suppress the grouping message or [ungroup()](https://dplyr.tidyverse.org/reference/group_by.html) when you\'re done.

**3.6 Case study: aggregates and sample size**

Whenever you do any aggregation, it\'s always a good idea to include a count ([n()](https://dplyr.tidyverse.org/reference/context.html)). That way, you can ensure that you\'re not drawing conclusions based on very small amounts of data.

We\'ll demonstrate this with some baseball data from the **Lahman** package. Specifically, we will compare what proportion of times a player gets a hit (H) vs. the number of times they try to put the ball in play (AB):

batters \<- Lahman::Batting \|\>

  group_by(playerID) \|\>

  summarize(

    performance = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),

    n = sum(AB, na.rm = TRUE)

  )

batters

When we plot the skill of the batter (measured by the batting average, performance) against the number of opportunities to hit the ball (measured by times at bat, n), you see two patterns:

1.  

2.  The variation in performance is larger among players with fewer at-bats. The shape of this plot is very characteristic: whenever you plot a mean (or other summary statistics) vs. group size, you\'ll see that the variation decreases as the sample size increases[4](https://r4ds.hadley.nz/data-transform#fn4).

3.  

4.  There\'s a positive correlation between skill (performance) and opportunities to hit the ball (n) because teams want to give their best batters the most opportunities to hit the ball.

5.  

batters \|\>

  filter(n \> 100) \|\>

  ggplot(aes(x = n, y = performance)) +

  geom_point(alpha = 1 / 10) +

  geom_smooth(se = FALSE)

Note the handy pattern for combining ggplot2 and dplyr. You just have to remember to switch from \|\>, for dataset processing, to + for adding layers to your plot.

**3.7 Summary**

In this chapter, you\'ve learned the tools that dplyr provides for working with data frames. The tools are roughly grouped into three categories: those that manipulate the rows (like [filter()](https://dplyr.tidyverse.org/reference/filter.html) and [arrange()](https://dplyr.tidyverse.org/reference/arrange.html), those that manipulate the columns (like [select()](https://dplyr.tidyverse.org/reference/select.html) and [mutate()](https://dplyr.tidyverse.org/reference/mutate.html)), and those that manipulate groups (like [group_by()](https://dplyr.tidyverse.org/reference/group_by.html) and [summarize()](https://dplyr.tidyverse.org/reference/summarise.html)). In this chapter, we\'ve focused on these \"whole data frame\" tools, but you haven\'t yet learned much about what you can do with the individual variable. We\'ll come back to that in the Transform part of the book, where each chapter will give you tools for a specific type of variable.
