---
title: "28_Quarto"
author: "Amir"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

# Communicate

However, it doesn't matter how great your analysis is unless you can explain it to others: you need to **communicate** your results.

![](images/communicate.png)

Figure 1: Communication is the final part of the data science process; if you can't communicate your results to other humans, it doesn't matter how great your analysis is.

Communication is the theme of the following two chapters:

-   In [Chapter 28](https://r4ds.hadley.nz/quarto), you will learn about Quarto, a tool for integrating prose, code, and results. You can use Quarto for analyst-to-analyst communication as well as analyst-to-decision-maker communication. Thanks to the power of Quarto formats, you can even use the same document for both purposes.

-   In [Chapter 29](https://r4ds.hadley.nz/quarto-formats), you'll learn a little about the many other varieties of outputs you can produce using Quarto, including dashboards, websites, and books.

    ## 28.1 Introduction

    Quarto is a command line interface tool, not an R package. This means that help is, by-and-large, not available through `?`. Instead, as you work through this chapter, and use Quarto in the future, you should refer to the [Quarto documentation](https://quarto.org/).

    ### 28.1.1 Prerequisites

    You need the Quarto command line interface (Quarto CLI), but you don't need to explicitly install it or load it, as RStudio automatically does both when needed.

    ## 28.2 Quarto basics

    This is a Quarto file -- a plain text file that has the extension `.qmd`:

    It contains three important types of content:

    1.  An (optional) **YAML header** surrounded by `---`s.

    2.  **Chunks** of R code surrounded by ```` ``` ````.

    3.  Text mixed with simple text formatting like `# heading` and `_italics_`.

    When you render the document, Quarto sends the `.qmd` file to **knitr**, <https://yihui.org/knitr/>, which executes all of the code chunks and creates a new markdown (`.md`) document which includes the code and its output. The markdown file generated by knitr is then processed by **pandoc**, [https://pandoc.org](https://pandoc.org/), which is responsible for creating the finished file. This process is shown in [Figure 28.4](https://r4ds.hadley.nz/quarto#fig-quarto-flow). The advantage of this two step workflow is that you can create a very wide range of output formats, as you'll learn about in [Chapter 29](https://r4ds.hadley.nz/quarto-formats).

    ![](images/quarto-flow-01.png)

To get started with your own `.qmd` file, select *File \> New File \> Quarto Document...* in the menu bar.

The following sections dive into the three components of a Quarto document in more details: the markdown text, the code chunks, and the YAML header.

## 28.3 Visual editor

The Visual editor in RStudio provides a [WYSIWYM](https://en.wikipedia.org/wiki/WYSIWYM) interface for authoring Quarto documents. Under the hood, prose in Quarto documents (`.qmd` files) is written in Markdown, a lightweight set of conventions for formatting plain text files.

In the visual editor you can either use the buttons on the menu bar to insert images, tables, cross-references, etc. or you can use the catch-all ⌘ / shortcut to insert just about anything. If you are at the beginning of a line (as shown in [Figure 28.5](https://r4ds.hadley.nz/quarto#fig-visual-editor)), you can also enter just / to invoke the shortcut.

### 28.3.1 Exercises

In the visual editor, go to Insert \> Citation and insert a citation to the paper titled [Welcome to the Tidyverse](https://joss.theoj.org/papers/10.21105/joss.01686) using its DOI (digital object identifier), which is [10.21105/joss.01686](https://doi.org/10.21105/joss.01686). Render the document and observe how the reference shows up in the document. What change do you observe in the YAML of your document?

## 28.4 Source editor

The Source editor will feel familiar to those with experience writing R scripts or R Markdown documents. The Source editor can also be useful for debugging any Quarto syntax errors since it's often easier to catch these in plain text.

The guide below shows how to use Pandoc's Markdown for authoring Quarto documents in the source editor.

```         
## Text formatting

*italic* **bold** ~~strikeout~~ `code`

superscript^2^ subscript~2~  

[underline]{.underline} [small caps]{.smallcaps}  

## Headings  
# 1st Level Header  
## 2nd Level Header  
### 3rd Level Header 

## Lists  
-   Bulleted list item 1  
-   Item 2      
  -   Item 2a      
  -   Item 2b  

1.  Numbered list item 1  
2.  Item 
2.     The numbers are incremented automatically in the output.

## Links and images  
<http://example.com>  
[linked phrase](http://example.com)  
![optional caption text](quarto.png)
{fig-alt="Quarto logo and the word quarto spelled in small case letters"}  

## Tables  
| First Header | Second Header | 
|--------------|---------------|
| Content Cell | Content Cell  | 
| Content Cell | Content Cell  |
```

The best way to learn these is simply to try them out. It will take a few days, but soon they will become second nature, and you won't need to think about them. If you forget, you can get to a handy reference sheet with *Help \> Markdown Quick Reference*.

https://github.com/hadley/r4ds

## 28.5 Code chunks

There are three ways to insert code chunks:

1.  The keyboard shortcut Cmd + Option + I / Ctrl + Alt + I.

2.  The "Insert" button icon in the editor toolbar.

3.  By manually typing the chunk delimiters ```` ```{r} ```` and ```` ``` ````.

We'd recommend you learn the keyboard shortcut. It will save you a lot of time in the long run!

using the keyboard shortcut that by Cmd/Ctrl + Enter.

However, chunks get a new keyboard shortcut: Cmd/Ctrl + Shift + Enter, which runs all the code in the chunk. Think of a chunk like a function.

### 28.5.1 Chunk label

Chunks can be given an optional label, e.g. by #\|

```{r}
#| label: simple-addition

1 + 1

```

This has three advantages:

1.  You can more easily navigate to specific chunks using the drop-down code navigator in the bottom-left of the script editor.

2.  Graphics produced by the chunks will have useful names that make them easier to use elsewhere. More on that in [Section 28.6](https://r4ds.hadley.nz/quarto#sec-figures).

3.  You can set up networks of cached chunks to avoid re-performing expensive computations on every run. More on that in [Section 28.8](https://r4ds.hadley.nz/quarto#sec-caching).

our chunk labels should be short but evocative and should not contain spaces. We recommend using dashes (`-`) to separate words (instead of underscores, `_`) and avoiding other special characters in chunk labels.

Additionally, chunk labels cannot be duplicated. Each chunk label must be unique.

### 28.5.2 Chunk options

Chunk output can be customized with **options**, fields supplied to chunk header. Knitr provides almost 60 options that you can use to customize your code chunks. Here we'll cover the most important chunk options that you'll use frequently. You can see the full list at [https://yihui.org/knitr/options](https://yihui.org/knitr/options/).

The most important set of options controls if your code block is executed and what results are inserted in the finished report:

-   `eval: false` prevents code from being evaluated. (And obviously if the code is not run, no results will be generated). This is useful for displaying example code, or for disabling a large block of code without commenting each line.

-   `include: false` runs the code, but doesn't show the code or results in the final document. Use this for setup code that you don't want cluttering your report.

-   `echo: false` prevents code, but not the results from appearing in the finished file. Use this when writing reports aimed at people who don't want to see the underlying R code.

-   `message: false` or `warning: false` prevents messages or warnings from appearing in the finished file.

-   `results: hide` hides printed output; `fig-show: hide` hides plots.

-   `error: true` causes the render to continue even if code returns an error. This is rarely something you'll want to include in the final version of your report, but can be very useful if you need to debug exactly what is going on inside your `.qmd`. It's also useful if you're teaching R and want to deliberately include an error. The default, `error: false` causes rendering to fail if there is a single error in the document.

Each of these chunk options get added to the header of the chunk, following `#|`, e.g., in the following chunk the result is not printed since `eval` is set to false.

```{r}
#| label: simple-multiplication
#| eval: false

2 * 2
```

|     Option     | Run code | Show code | Output | Plot | Messages | Warnings |
|:--------------:|:--------:|:---------:|:------:|:----:|:--------:|:--------:|
|  eval: false   |    X     |           |   X    |  X   |    X     |    X     |
| include: false |          |     X     |   X    |  X   |    X     |    X     |
|  echo: false   |          |     X     |        |      |          |          |
| results: hide  |          |           |   X    |      |          |          |
| fig-show: hide |          |           |        |  X   |          |          |
| message: false |          |           |        |      |    X     |          |
| warning: false |          |           |        |      |          |    X     |

: The following table summarizes which types of output each option suppresses

### 28.5.3 Global options

As you work more with knitr, you will discover that some of the default chunk options don't fit your needs and you want to change them.

You can do this by adding the preferred options in the document YAML, under `execute`.

if you are preparing a report for an audience who does not need to see your code but only your results and narrative, you might set `echo: false` at the document level.

You might consider setting `message: false` and `warning: false`, but that would make it harder to debug problems because you wouldn't see any messages in the final document.

Since Quarto is designed to be multi-lingual (works with R as well as other languages like Python, Julia, etc.), all of the knitr options are not available at the document execution level since some of them only work with knitr and not other engines Quarto uses for running code in other languages (e.g., Jupyter). You can, however, still set these as global options for your document under the `knitr` field, under `opts_chunk`. For example, when writing books and tutorials we set:

`{title: "Tutorial"} knitr:   opts_chunk:     comment: "#>"     collapse: true`

### 28.5.4 Inline code

There is one other way to embed R code into a Quarto document: directly into the text, with: `` `r ` ``. This can be very useful if you mention properties of your data in the text. For example, the example document used at the start of the chapter had:

> We have data about `` `r nrow(diamonds)` `` diamonds. Only `` `r nrow(diamonds) - nrow(smaller)` `` are larger than 2.5 carats. The distribution of the remainder is shown below:

When the report is rendered, the results of these computations are inserted into the text:

> We have data about 53940 diamonds. Only 126 are larger than 2.5 carats. The distribution of the remainder is shown below:

When inserting numbers into text, [`format()`](https://rdrr.io/r/base/format.html) is your friend. It allows you to set the number of `digits` so you don't print to a ridiculous degree of accuracy, and a `big.mark` to make numbers easier to read. You might combine these into a helper function:

```{r}
comma <- function(x) format(x, digits = 2, big.mark = ",")
comma(3452345)
#> [1] "3,452,345"
comma(.12358124331)
#> [1] "0.12"
```

## 28.6 Figures

The figures in a Quarto document can be embedded (e.g., a PNG or JPEG file) or generated as a result of a code chunk.

### 28.6.1 Figure sizing

The biggest challenge of graphics in Quarto is getting your figures the right size and shape. There are five main options that control figure sizing: `fig-width`, `fig-height`, `fig-asp`, `out-width` and `out-height`. Image sizing is challenging because there are two sizes (the size of the figure created by R and the size at which it is inserted in the output document), and multiple ways of specifying the size (i.e. height, width, and aspect ratio: pick two of three).

We recommend three of the five options:

-   Plots tend to be more aesthetically pleasing if they have consistent width. To enforce this, set `fig-width: 6` (6") and `fig-asp: 0.618` (the golden ratio) in the defaults. Then in individual chunks, only adjust `fig-asp`.

-   Control the output size with `out-width` and set it to a percentage of the body width of the output document. We suggest to `out-width: "70%"` and `fig-align: center`.

```         
That gives plots room to breathe, without taking up too much space.
```

-   To put multiple plots in a single row, set the `layout-ncol` to 2 for two plots, 3 for three plots, etc. This effectively sets `out-width` to "50%" for each of your plots if `layout-ncol` is 2, "33%" if `layout-ncol` is 3, etc. Depending on what you're trying to illustrate (e.g., show data or show plot variations), you might also tweak `fig-width`, as discussed below.

```         
If you find that you\'re having to squint to read the text in your plot, you need to tweak `fig-width`. If `fig-width` is larger than the size the figure is rendered in the final doc, the text will be too small; if `fig-width` is smaller, the text will be too big. You\'ll often need to do a little experimentation to figure out the right ratio between the `fig-width` and the eventual width in your document. To illustrate the principle, the following three plots have `fig-width` of 4, 6, and 8 respectively:
```

If you want to make sure the font size is consistent across all your figures, whenever you set `out-width`, you'll also need to adjust `fig-width` to maintain the same ratio with your default `out-width`. For example, if your default `fig-width` is 6 and `out-width` is "70%", when you set `out-width: "50%"` you'll need to set `fig-width` to 4.3 (6 \* 0.5 / 0.7).

Figure sizing and scaling is an art and science and getting things right can require an iterative trial-and-error approach. You can learn more about figure sizing in the [taking control of plot scaling blog post](https://www.tidyverse.org/blog/2020/08/taking-control-of-plot-scaling/).

### 28.6.2 Other important options

When mingling code and text, like in this book, you can set `fig-show: hold` so that plots are shown after the code. This has the pleasant side effect of forcing you to break up large blocks of code with their explanations.

To add a caption to the plot, use `fig-cap`. In Quarto this will change the figure from inline to "floating".

If you're producing PDF output, the default graphics type is PDF. This is a good default because PDFs are high quality vector graphics. However, they can produce very large and slow plots if you are displaying thousands of points. In that case, set `fig-format: "png"` to force the use of PNGs. They are slightly lower quality, but will be much more compact.

It's a good idea to name code chunks that produce figures, even if you don't routinely label other chunks. The chunk label is used to generate the file name of the graphic on disk, so naming your chunks makes it much easier to pick out plots and reuse in other circumstances (e.g., if you want to quickly drop a single plot into an email).

## 28.7 Tables

By default, Quarto prints data frames and matrices as you'd see them in the console:

```{r}
mtcars[1:5, ]
#>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
#> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
#> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
#> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
#> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
#> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
```

If you prefer that data be displayed with additional formatting you can use the [`knitr::kable()`](https://rdrr.io/pkg/knitr/man/kable.html) function. The code below generates [Table 28.1](https://r4ds.hadley.nz/quarto#tbl-kable).

```{r}
knitr::kable(mtcars[1:5, ], )
```

Read the documentation for [`?knitr::kable`](https://rdrr.io/pkg/knitr/man/kable.html) to see the other ways in which you can customize the table. For even deeper customization, consider the **gt**, **huxtable**, **reactable**, **kableExtra**, **xtable**, **stargazer**, **pander**, **tables**, and **ascii** packages. Each provides a set of tools for returning formatted tables from R code.

```{r}
gt::gt(mtcars[1:5, ])
```

## 28.8 Caching

Normally, each render of a document starts from a completely clean slate. This is great for reproducibility, because it ensures that you've captured every important computation in code. However, it can be painful if you have some computations that take a long time. The solution is `cache: true`.

The caching system must be used with care, because by default it is based on the code only, not its dependencies.

As your caching strategies get progressively more complicated, it's a good idea to regularly clear out all your caches with [`knitr::clean_cache()`](https://rdrr.io/pkg/knitr/man/clean_cache.html).

## 28.9 Troubleshooting

If the errors are due to the R code in the document, the first thing you should always try is to recreate the problem in an interactive session. Restart R, then "Run all chunks", either from the Code menu, under Run region or with the keyboard shortcut Ctrl + Alt + R. If you're lucky, that will recreate the problem, and you can figure out what's going on interactively.

If that doesn't help, there must be something different between your interactive environment and the Quarto environment. You're going to need to systematically explore the options. The most common difference is the working directory: the working directory of a Quarto is the directory in which it lives. Check the working directory is what you expect by including [`getwd()`](https://rdrr.io/r/base/getwd.html) in a chunk.

Next, brainstorm all the things that might cause the bug. You'll need to systematically check that they're the same in your R session and your Quarto session. The easiest way to do that is to set `error: true` on the chunk causing the problem, then use [`print()`](https://rdrr.io/r/base/print.html) and [`str()`](https://rdrr.io/r/utils/str.html) to check that settings are as you expect.

## 28.10 YAML header

You can control many other "whole document" settings by tweaking the parameters of the YAML header. You might wonder what YAML stands for: it's "YAML Ain't Markup Language", which is designed for representing hierarchical data in a way that's easy for humans to read and write. Quarto uses it to control many details of the output. Here we'll discuss three: self-contained documents, document parameters, and bibliographies.

### 28.10.1 Self-contained

if you want to email the report to a colleague, you might prefer to have a single, self-contained, HTML document that embeds all of its dependencies. You can do this by specifying the `embed-resources` option:

``` {format:}
  html:
    embed-resources: true
```

The resulting file will be self-contained, such that it will need no external files and no internet access to be displayed properly by a browser.

### 28.10.2 Parameters

Quarto documents can include one or more parameters whose values can be set when you render the report.

``` {.unnumbered .unnumbered .unnumbered}
format: html
params:
  my_class: "suv"
---

{r}
#| label: setup
#| include: false

library(tidyverse)

class <- mpg |> filter(class == params$my_class)


# Fuel economy for `r params$my_class`s
{r}
#| message: false

ggplot(class, aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth(se = FALSE)
```

As you can see, parameters are available within the code chunks as a read-only list named `params`.

You can write atomic vectors directly into the YAML header. You can also run arbitrary R expressions by prefacing the parameter value with `!expr`. This is a good way to specify date/time parameters.

``` {params:}
  start: !expr lubridate::ymd("2015-01-01")
  snapshot: !expr lubridate::ymd_hms("2015-01-01 12:30:00")
```
