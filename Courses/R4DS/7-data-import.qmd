---
title: "7-data-import"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# 7  Data import

## 7.1 Introduction

### 7.1.1 Prerequisites

```{r}
library(tidyverse)
```

## 7.2 Reading data from a file

CSV, which is short for comma-separated values.

We can read this file into R using [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html). The first argument is the most important: the path to the file.

### 7.2.1 Practical advice

```{r}
students <- read_csv("7-students.csv")

```

Once you read data in, the first step usually involves transforming it in some way to make it easier to work with in the rest of your analysis.

```{r}
students
```

In the `favourite.food` column, there are a bunch of food items, and then the character string `N/A`, which should have been a real `NA` that R will recognize as "not available". This is something we can address using the `na` argument. By default, [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) only recognizes empty strings (`""`) in this dataset as `NA`s, we want it to also recognize the character string `"N/A"`.

```{r}
students <- read_csv("7-students.csv", na = c("N/A", ""))

students

```

You might also notice that the `Student ID` and `Full Name` columns are surrounded by backticks. That's because they contain spaces, breaking R's usual rules for variable names; they're **non-syntactic** names. To refer to these variables, you need to surround them with backticks, `` ` ``:

```{r}
students |> 
  rename(
    student_id = `Student ID`,
    full_name = `Full Name`
  )

```

An alternative approach is to use [`janitor::clean_names()`](https://sfirke.github.io/janitor/reference/clean_names.html) to use some heuristics to turn them all into snake case at once^[1](https://r4ds.hadley.nz/data-import#fn1)^.

```{r}
students <- read_csv("7-students.csv", na = c("N/A", ""))

students |> janitor::clean_names()

```

Another common task after reading in data is to consider variable types. For example, `meal_plan` is a categorical variable with a known set of possible values, which in R should be represented as a factor:

```{r}
students |>
  janitor::clean_names() |>
  mutate(meal_plan = factor(meal_plan))

```

Before you analyze these data, you'll probably want to fix the `age` and `id` columns. Currently, `age` is a character variable because one of the observations is typed out as `five` instead of a numeric `5`. We discuss the details of fixing this issue in [Chapter 20](https://r4ds.hadley.nz/spreadsheets).

```{r}
students <- students |>
  janitor::clean_names() |>
  mutate(
    meal_plan = factor(meal_plan),
    age = parse_number(if_else(age == "five", "5", age))
  )

students

```

### 7.2.2 Other arguments

[`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) can read text strings that you've created and formatted like a CSV file:

```{r}
read_csv(
  "a,b,c
  1,2,3
  4,5,6"
)

```

Usually, [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) uses the first line of the data for the column names, which is a very common convention. But it's not uncommon for a few lines of metadata to be included at the top of the file. You can use `skip = n` to skip the first `n` lines or use `comment = "#"` to drop all lines that start with (e.g.) `#`:

```{r}
read_csv(
  "The first line of metadata
  The second line of metadata
  x,y,z
  1,2,3",
  skip = 2
)
#> # A tibble: 1 × 3
#>       x     y     z
#>   <dbl> <dbl> <dbl>
#> 1     1     2     3

read_csv(
  "# A comment I want to skip
  x,y,z
  1,2,3",
  comment = "#"
)
#> # A tibble: 1 × 3
#>       x     y     z
#>   <dbl> <dbl> <dbl>
#> 1     1     2     3
```

In other cases, the data might not have column names. You can use `col_names = FALSE` to tell [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) not to treat the first row as headings and instead label them sequentially from `X1` to `Xn`:

```{r}
read_csv(
  "1,2,3
  4,5,6",
  col_names = FALSE
)
#> # A tibble: 2 × 3
#>      X1    X2    X3
#>   <dbl> <dbl> <dbl>
#> 1     1     2     3
#> 2     4     5     6
```

Alternatively, you can pass `col_names` a character vector which will be used as the column names:

```{r}
read_csv(
  "1,2,3
  4,5,6",
  col_names = c("x", "y", "z")
)
#> # A tibble: 2 × 3
#>       x     y     z
#>   <dbl> <dbl> <dbl>
#> 1     1     2     3
#> 2     4     5     6
```

### 7.2.3 Other file types

-    [`read_csv2()`](https://readr.tidyverse.org/reference/read_delim.html) reads semicolon-separated files. These use `;` instead of `,` to separate fields and are common in countries that use `,` as the decimal marker.

-    [`read_tsv()`](https://readr.tidyverse.org/reference/read_delim.html) reads tab-delimited files.

-    [`read_delim()`](https://readr.tidyverse.org/reference/read_delim.html) reads in files with any delimiter, attempting to automatically guess the delimiter if you don\'t specify it.

-    [`read_fwf()`](https://readr.tidyverse.org/reference/read_fwf.html) reads fixed-width files. You can specify fields by their widths with [`fwf_widths()`](https://readr.tidyverse.org/reference/read_fwf.html) or by their positions with [`fwf_positions()`](https://readr.tidyverse.org/reference/read_fwf.html).

-    [`read_table()`](https://readr.tidyverse.org/reference/read_table.html) reads a common variation of fixed-width files where columns are separated by white space.

-    [`read_log()`](https://readr.tidyverse.org/reference/read_log.html) reads Apache-style log files.

    ## 7.3 Controlling column types

    A CSV file doesn\'t contain any information about the type of each variable (i.e. whether it\'s a logical, number, string, etc.), so readr will try to guess the type.

### 7.3.2 Missing values, column types, and problems

The most common way column detection fails is that a column contains unexpected values, and you get a character column instead of a more specific type. One of the most common causes for this is a missing
value, recorded using something other than the `NA` that readr expects.

```{r}
simple_csv <- "
  x
  10
  .
  20
  30"
```

read later ...
