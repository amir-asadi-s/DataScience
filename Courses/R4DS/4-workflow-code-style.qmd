---
title: "4_Workflow: code style"
format: html
editor: visual
---

## **4  Workflow: code style**

Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread.

This chapter will introduce the most important points of the [tidyverse style guide](https://style.tidyverse.org/), which is used throughout this book.

Styling your code will feel a bit tedious to start with, but if you practice it, it will soon become second nature. Additionally, there are some great tools to quickly restyle existing code, like the [**styler**](https://styler.r-lib.org/) package by Lorenz Walthert.

Once you\'ve installed it with install.packages("styler"), an easy way to use it is via RStudio\'s **command palette**. The command palette lets you use any built-in RStudio command and many addins provided by packages. Open the palette by pressing Cmd/Ctrl + Shift + P, then type \"styler\" to see all the shortcuts offered by styler. [Figure 4.1](https://r4ds.hadley.nz/workflow-style#fig-styler)shows the results.

**4.1 Names**

We talked briefly about names in [Section 2.3](https://r4ds.hadley.nz/workflow-basics#sec-whats-in-a-name). Remember that variable names (those created by \<- and those created by [mutate()](https://dplyr.tidyverse.org/reference/mutate.html)) should use only lowercase letters, numbers, and \_. Use \_ to separate words within a name.

As a general rule of thumb, it\'s better to prefer long, descriptive names that are easy to understand rather than concise names that are fast to type. Short names save relatively little time when writing code (especially since autocomplete will help you finish typing them), but it can be time-consuming when you come back to old code and are forced to puzzle out a cryptic abbreviation.

In general, if you have a bunch of variables that are a variation on a theme, you\'re better off giving them a common prefix rather than a common suffix because autocomplete works best on the start of a variable.

Don\'t put spaces inside or outside parentheses for regular function calls. Always put a space after a comma, just like in standard English.

**4.3 Pipes**

\|\> should always have a space before it and should typically be the last thing on a line.

If the function you\'re piping into has named arguments (like [mutate()](https://dplyr.tidyverse.org/reference/mutate.html) or [summarize()](https://dplyr.tidyverse.org/reference/summarise.html)), put each argument on a new line. If the function doesn\'t have named arguments (like [select()](https://dplyr.tidyverse.org/reference/select.html) or [filter()](https://dplyr.tidyverse.org/reference/filter.html)), keep everything on one line unless it doesn\'t fit, in which case you should put each argument on its own line.

**4.4 ggplot2**

The same basic rules that apply to the pipe also apply to ggplot2; just treat + the same way as \|\>.

**4.5 Sectioning comments**

\# Load data \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

\# Plot data \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

RStudio provides a keyboard shortcut to create these headers (Cmd/Ctrl + Shift + R), and will display them in the code navigation drop-down at the bottom-left of the editor, as shown in [Figure 4.2](https://r4ds.hadley.nz/workflow-style#fig-rstudio-sections).

After adding sectioning comments to your script, you can easily navigate to them using the code navigation tool in the bottom-left of the script editor.

**4.7 Summary**

In this chapter, you\'ve learned the most important principles of code style. These may feel like a set of arbitrary rules to start with (because they are!) but over time, as you write more code, and share code with more people, you\'ll see how important a consistent style is. And don\'t forget about the styler package: it\'s a great way to quickly improve the quality of poorly styled code.
