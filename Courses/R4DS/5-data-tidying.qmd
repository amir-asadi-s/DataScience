---
title: "5_Data_tidying"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## **5  Data tidying**

**5.1 Introduction**

"Happy families are all alike; every unhappy family is unhappy in its own way."

--- Leo Tolstoy

"Tidy datasets are all alike, but every messy dataset is messy in its own way."

--- Hadley Wickham

In this chapter, you will learn a consistent way to organize your data in R using a system called **tidy data**.

In this chapter, you'll first learn the definition of tidy data and see it applied to a simple toy dataset. Then we'll dive into the primary tool you'll use for tidying data: pivoting. Pivoting allows you to change the form of your data without changing any of the values.

**5.1.1 Prerequisites**

tidyr is a member of the core tidyverse.

```{r}
library(tidyverse)
```

**5.2 Tidy data**

There are three interrelated rules that make a dataset tidy:

1.  Each variable is a column; each column is a variable.

2.  Each observation is a row; each row is an observation.

3.  Each value is a cell; each cell is a single value.

    ![](images/tidy-1.png)

[Figure 5.1](https://r4ds.hadley.nz/data-tidy#fig-tidy-structure) shows the rules visually.

Figure 5.1: The following three rules make a dataset tidy: variables are columns, observations are rows, and values are cells.

Why ensure that your data is tidy? There are two main advantages:

1.  There's a general advantage to picking one consistent way of storing data. If you have a consistent data structure, it's easier to learn the tools that work with it because they have an underlying uniformity.

2.  There's a specific advantage to placing variables in columns because it allows R's vectorized nature to shine. As you learned in [Section 3.3.1](https://r4ds.hadley.nz/data-transform#sec-mutate)and [Section 3.5.2](https://r4ds.hadley.nz/data-transform#sec-summarize), most built-in R functions work with vectors of values. That makes transforming tidy data feel particularly natural.

**5.3 Lengthening data**

most real data is untidy. There are two main reasons:

1.  Data is often organized to facilitate some goal other than analysis. For example, it's common for data to be structured to make data entry, not analysis, easy.

2.  Most people aren't familiar with the principles of tidy data, and it's hard to derive them yourself unless you spend a lot of time working with data.

This means that most real analyses will require at least a little tidying. You'll begin by figuring out what the underlying variables and observations are.

Next, you'll **pivot** your data into a tidy form, with variables in the columns and observations in the rows.

tidyr provides two functions for pivoting data: [pivot_longer()](https://tidyr.tidyverse.org/reference/pivot_longer.html) and [pivot_wider()](https://tidyr.tidyverse.org/reference/pivot_wider.html).

We'll first start with [pivot_longer()](https://tidyr.tidyverse.org/reference/pivot_longer.html) because it's the most common case. Let's dive into some examples.

**5.3.1 Data in column names**

The billboard dataset records the billboard rank of songs in the year 2000:

In this dataset, each observation is a song. The first three columns (artist, track and date.entered) are variables that describe the song. Then we have 76 columns (wk1-wk76) that describe the rank of the song in each week[1](https://r4ds.hadley.nz/data-tidy#fn1). Here, the column names are one variable (the week) and the cell values are another (the rank).

To tidy this data, we'll use [pivot_longer()](https://tidyr.tidyverse.org/reference/pivot_longer.html):

**Pivot data from wide to long**

**Description**

pivot_longer() "lengthens" data, increasing the number of rows and decreasing the number of columns. The inverse transformation is [pivot_wider()](http://127.0.0.1:27919/help/library/tidyr/help/pivot_wider)

Learn more in vignette("pivot").

```{r}
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank"
  )

```

After the data, there are three key arguments:

-   cols specifies which columns need to be pivoted, i.e. which columns aren't variables. This argument uses the same syntax as [select()](https://dplyr.tidyverse.org/reference/select.html) so here we could use !c(artist, track, date.entered) or starts_with("wk").

-   names_to names the variable stored in the column names, we named that variable week.

-   values_to names the variable stored in the cell values, we named that variable rank.

What happens if a song is in the top 100 for less than 76 weeks? Take 2 Pac's "Baby Don't Cry", for example. The above output suggests that it was only in the top 100 for 7 weeks, and all the remaining weeks are filled in with missing values. These NAs don't really represent unknown observations; they were forced to exist by the structure of the dataset[2](https://r4ds.hadley.nz/data-tidy#fn2), so we can ask [pivot_longer()](https://tidyr.tidyverse.org/reference/pivot_longer.html) to get rid of them by setting values_drop_na = TRUE:

```{r}
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  )

```

This data is now tidy, but we could make future computation a bit easier by converting values of week from character strings to numbers using [mutate()](https://dplyr.tidyverse.org/reference/mutate.html) and [readr::parse_number()](https://readr.tidyverse.org/reference/parse_number.html). [parse_number()](https://readr.tidyverse.org/reference/parse_number.html) is a handy function that will extract the first number from a string, ignoring all other text.

```{r}
billboard_longer <- billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  ) |> 
  mutate(
    week = parse_number(week)
  )
billboard_longer

```

visualize how song ranks vary over time. The code is shown below and the result is in [Figure 5.2](https://r4ds.hadley.nz/data-tidy#fig-billboard-ranks). We can see that very few songs stay in the top 100 for more than 20 weeks.

visualize how song ranks vary over time. The code is shown below and the result is in [Figure 5.2](https://r4ds.hadley.nz/data-tidy#fig-billboard-ranks). We can see that very few songs stay in the top 100 for more than 20 weeks.

```{r}

billboard_longer |> 
  ggplot(aes(x = week, y = rank, group = track)) + 
  geom_line(alpha = 0.25) + 
  scale_y_reverse()
```

Figure 5.2: A line plot showing how the rank of a song changes over time.

**5.3.2 How does pivoting work?**

We'll create the data with [`tribble()`](https://tibble.tidyverse.org/reference/tribble.html), a handy function for constructing small tibbles by hand:

```{r}
df <- tribble(
  ~id,  ~bp1, ~bp2,
   "A",  100,  120,
   "B",  140,  115,
   "C",  120,  125
)
df
```

```{r}
df |> 
  pivot_longer(
  cols = bp1:bp2,
  names_to = 'measurement',
  values_to = 'value'
)
```

We want our new dataset to have three variables: `id` (already exists), `measurement` (the column names), and `value` (the cell values). To achieve this, we need to pivot `df` longer:

```{r}
df |> 
  pivot_longer(
    cols = bp1:bp2,
    names_to = "measurement",
    values_to = "value"
  )

```

![](images/hopr_0403-01.png)

Figure 5.3: Columns that are already variables need to be repeated, once for each column that is pivoted.

### 5.3.3 Many variables in column names

A more challenging situation occurs when you have multiple pieces of information crammed into the column names, and you would like to store these in separate new variables.

```{r}
who2
```

The first piece, `sp`/`rel`/`ep`, describes the method used for the diagnosis, the second piece, `m`/`f` is the `gender` (coded as a binary variable in this dataset), and the third piece, `014`/`1524`/`2534`/`3544`/`4554`/`5564`/`65` is the `age` range (`014` represents 0-14, for example).

So in this case we have six pieces of information recorded in `who2`: the country and the year (already columns); the method of diagnosis, the gender category, and the age range category (contained in the other column names); and the count of patients in that category (cell values).

```{r}
who2 |> 
  pivot_longer(
    cols = !(country:year),
    names_to = c("diagnosis", "gender", "age"), 
    names_sep = "_",
    values_to = "count"
  )

```

An alternative to `names_sep` is `names_pattern`, which you can use to extract variables from more complicated naming scenarios, once you've learned about regular expressions in [Chapter 15](https://r4ds.hadley.nz/regexps).

![](images/multiple-names.png)

Figure 5.6: Pivoting columns with multiple pieces of information in the names means that each column name now fills in values in multiple output columns.

### 5.3.4 Data and variable names in the column headers

he next step up in complexity is when the column names include a mix of variable values and variable names. For example, take the `household` dataset:

```{r}
household
```

This dataset contains data about five families, with the names and dates of birth of up to two children. The new challenge in this dataset is that the column names contain the names of two variables (`dob`, `name)` and the values of another (`child,` with values 1 or 2). To solve this problem we again need to supply a vector to `names_to` but this time we use the special `".value"` sentinel; this isn't the name of a variable but a unique value that tells [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) to do something different. This overrides the usual `values_to` argument to use the first component of the pivoted column name as a variable name in the output.

```{r}
household |> 
  pivot_longer(
    cols = !family, 
    names_to = c(".value", "child"), 
    names_sep = "_", 
    values_drop_na = TRUE
  )

```

![](images/names-and-values.png)

Figure 5.7: Pivoting with `names_to = c(".value", "num")` splits the column names into two components: the first part determines the output column name (`x` or `y`), and the second part determines the value of the `num` column.

## 5.4 Widening data

Next we'll pivot (HA HA) to [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html), which makes datasets **wider** by increasing columns and reducing rows and helps when one observation is spread across multiple rows. This seems to arise less commonly in the wild, but it does seem to crop up a lot when dealing with governmental data.

We'll start by looking at `cms_patient_experience`, a dataset from the Centers of Medicare and Medicaid services that collects data about patient experiences:

```{r}
cms_patient_experience
```

We can see the complete set of values for `measure_cd` and `measure_title` by using [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html):

```{r}
cms_patient_experience |> 
  distinct(measure_cd, measure_title)

```

[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) has the opposite interface to [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html): instead of choosing new column names, we need to provide the existing columns that define the values (`values_from`) and the column name (`names_from)`:

```{r}
cms_patient_experience |> 
  pivot_wider(
    names_from = measure_cd,
    values_from = prf_rate
  )

```

The output doesn't look quite right; we still seem to have multiple rows for each organization. That's because, we also need to tell [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) which column or columns have values that uniquely identify each row; in this case those are the variables starting with `"org"`:

```{r}
cms_patient_experience |> 
  pivot_wider(
    id_cols = starts_with("org"),
    names_from = measure_cd,
    values_from = prf_rate
  )

```

### 5.4.1 How does `pivot_wider()` work?

```{r}
df <- tribble(
  ~id, ~measurement, ~value,
  "A",        "bp1",    100,
  "B",        "bp1",    140,
  "B",        "bp2",    115, 
  "A",        "bp2",    120,
  "A",        "bp3",    105
)
```

```{r}

df |> 
  pivot_wider(
    names_from = measurement,
    values_from = value
  )

```

To begin the process [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) needs to first figure out what will go in the rows and columns. The new column names will be the unique values of `measurement`.

```{r}
df |> 
  distinct(measurement) |> 
  pull()
```

By default, the rows in the output are determined by all the variables that aren't going into the new names or values. These are called the `id_cols`. Here there is only one column, but in general there can be any number.

```{r}
df |> 
  select(-measurement, -value) |> 
  distinct()
```

[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) then combines these results to generate an empty data frame:

```{r}
df |> 
  select(-measurement, -value) |> 
  distinct() |> 
  mutate(x = NA, y = NA, z = NA)

```

You might also wonder what happens if there are multiple rows in the input that correspond to one cell in the output. The example below has two rows that correspond to `id` "A" and `measurement` "bp1":

```{r}
df <- tribble(
  ~id, ~measurement, ~value,
  "A",        "bp1",    100,
  "A",        "bp1",    102,
  "A",        "bp2",    120,
  "B",        "bp1",    140, 
  "B",        "bp2",    115
)
```

```{r}
df |>
  pivot_wider(
    names_from = measurement,
    values_from = value
  )
#> Warning: Values from `value` are not uniquely identified; output will contain
#> list-cols.
#> • Use `values_fn = list` to suppress this warning.
#> • Use `values_fn = {summary_fun}` to summarise duplicates.
#> • Use the following dplyr code to identify duplicates.
#>   {data} %>%
#>   dplyr::group_by(id, measurement) %>%
#>   dplyr::summarise(n = dplyr::n(), .groups = "drop") %>%
#>   dplyr::filter(n > 1L)
#> # A tibble: 2 × 3
#>   id    bp1       bp2      
#>   <chr> <list>    <list>   
#> 1 A     <dbl [2]> <dbl [1]>
#> 2 B     <dbl [1]> <dbl [1]>

```

Since you don't know how to work with this sort of data yet, you'll want to follow the hint in the warning to figure out where the problem is:

```{r}
df |> 
  group_by(id, measurement) |> 
  summarize(n = n(), .groups = "drop") |> 
  filter(n > 1)

```

It's then up to you to figure out what's gone wrong with your data and either repair the underlying damage or use your grouping and summarizing skills to ensure that each combination of row and column values only has a single row.

## 5.5 Summary

The examples we presented here are a selection of those from [`vignette("pivot", package = "tidyr")`](https://tidyr.tidyverse.org/articles/pivot.html), so if you encounter a problem that this chapter doesn't help you with, that vignette is a good place to try next.

If you enjoyed this chapter and want to learn more about the underlying theory, you can learn more about the history and theoretical underpinnings in the [Tidy Data](https://www.jstatsoft.org/article/view/v059i10) paper published in the Journal of Statistical Software.
