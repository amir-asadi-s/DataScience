---
title: "1_Data visualization"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## 1.1 Introduction

"The simple graph has brought more information to the data analyst's mind than any other device." --- John Tukey

ggplot2 implements the grammar of graphics, a coherent system for describing and building graphs.

We will start by creating a simple scatterplot and use that to introduce aesthetic mappings and geometric objects -- the fundamental building blocks of ggplot2.

### 1.1.1 Prerequisites

In addition to tidyverse, we will also use the palmerpenguins package, which includes the penguins dataset containing body measurements for penguins on three islands in the Palmer Archipelago,

and the ggthemes package, which offers a colorblind safe color palette.

```{r}
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
```

## 1.2 First steps

Do penguins with longer flippers weigh more or less than penguins with shorter flippers?

### 1.2.1The penguins data frame

```{r}
palmerpenguins::penguins
```

To make the discussion easier, let's define some terms: • A variable is a quantity, quality, or property that you can measure. • A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. • An observation is a set of measurements made under similar conditions . We'll sometimes refer to an observation as a data point. • Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own "cell", each variable in its own column, and each observation in its own row. In the tidyverse, we use special data frames called tibbles

For an alternative view,use glimpse() if you're in RStudio, run View(penguins)

To learn more about by running ?penguins.

```{r}
glimpse(palmerpenguins::penguins)
?penguins
```

### 1.2.2 Ultimate goal

Our ultimate goal in this chapter is to recreate the following visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species of the penguin.

**1.2.3 Creating a ggplot**

With ggplot2, you begin a plot with the function [ggplot()](https://ggplot2.tidyverse.org/reference/ggplot.html), defining a plot object that you then add **layers** to.

The first argument of [ggplot()](https://ggplot2.tidyverse.org/reference/ggplot.html) is the dataset to use in the graph and so ggplot(data = penguins) creates an empty graph that is primed to display the penguins data, but you can think of it like an empty canvas you'll paint the remaining layers of your plot onto.

[ggplot](https://ggplot2.tidyverse.org/reference/ggplot.html)(data =penguins)

```{r}
ggplot(data = penguins)
```

Next, we need to tell [ggplot()](https://ggplot2.tidyverse.org/reference/ggplot.html) how the information from our data will be visually represented. The mapping argument of the [ggplot()](https://ggplot2.tidyverse.org/reference/ggplot.html) function defines how variables in your dataset are mapped to visual properties (**aesthetics**) of your plot. The mapping argument is always defined in the [aes()](https://ggplot2.tidyverse.org/reference/aes.html) function, and the x and y arguments of [aes()](https://ggplot2.tidyverse.org/reference/aes.html) specify which variables to map to the x and y axes.

The following plot shows the result of adding these mappings.

```{r}
ggplot( data =penguins, 
        mapping =aes(x =flipper_length_mm, y =body_mass_g)
        )
```

we need to define a **geom**: the geometrical object that a plot uses to represent data. These geometric objects are made available in ggplot2 with functions that start with geom\_. bar charts use bar geoms ([geom_bar()](https://ggplot2.tidyverse.org/reference/geom_bar.html)), line charts use line geoms ([geom_line()](https://ggplot2.tidyverse.org/reference/geom_path.html)), boxplots use boxplot geoms ([geom_boxplot()](https://ggplot2.tidyverse.org/reference/geom_boxplot.html)), scatterplots use point geoms ([geom_point()](https://ggplot2.tidyverse.org/reference/geom_point.html)), and so on.

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point()
#> Warning: Removed 2 rows containing missing values (`geom_point()`).
```

Like R, ggplot2 subscribes to the philosophy that missing values should never silently go missing.

**1.2.4 Adding aesthetics and layers**

does the relationship between flipper length and body mass differ by species?

does the relationship between flipper length and body mass differ by species? Let's incorporate species into our plot and see if this reveals any additional insights into the apparent relationship between these variables.

To achieve this, we will need to modify the aesthetic .

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  geom_point()
```

When a categorical variable is mapped to an aesthetic, ggplot2 will automatically assign a unique value of the aesthetic (here a unique color) to each unique level of the variable (each of the three species), a process known as **scaling**. ggplot2 will also add a legend that explains which values correspond to which levels.

a smooth curve displaying the relationship between body mass and flipper length.Since this is a new geometric object representing our data, we will add a new geom as a layer on top of our point geom: [geom_smooth()](https://ggplot2.tidyverse.org/reference/geom_smooth.html). And we will specify that we want to draw the line of best fit based on a linear model with method = "lm".

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  geom_point() +
  geom_smooth(method = "lm")
```

When aesthetic mappings are defined in [ggplot()](https://ggplot2.tidyverse.org/reference/ggplot.html), at the global level, they're passed down to each of the subsequent geom layers of the plot. However, each geom function in ggplot2 can also take a mapping argument, which allows for aesthetic mappings at the local level that are added to those inherited from the global level. Since we want points to be colored based on species but don't want the lines to be separated out for them, we should specify color = species for [geom_point()](https://ggplot2.tidyverse.org/reference/geom_point.html) only.

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(mapping = aes(color = species)) +
  geom_smooth(method = "lm")
```

It's generally not a good idea to represent information using only colors on a plot, as people perceive colors differently due to color blindness or other color vision differences. Therefore, in addition to color, we can also map species to the shape aesthetic.

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(mapping = aes(color = species, shape = species)) +
  geom_smooth(method = "lm")
```

And finally, we can improve the labels of our plot using the [labs()](https://ggplot2.tidyverse.org/reference/labs.html) function in a new layer. Some of the arguments to [labs()](https://ggplot2.tidyverse.org/reference/labs.html) might be self explanatory: title adds a title and subtitle adds a subtitle to the plot. Other arguments match the aesthetic mappings, x is the x-axis label, y is the y-axis label, and color and shape define the label for the legend. In addition, we can improve the color palette to be colorblind safe with the [scale_color_colorblind()](https://rdrr.io/pkg/ggthemes/man/colorblind.html) function from the ggthemes package.

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species"
  ) +
  scale_color_colorblind()
```

**1.3 ggplot2 calls**

Typically, the first one or two arguments to a function are so important. The first two arguments to [ggplot()](https://ggplot2.tidyverse.org/reference/ggplot.html) are **data** and **mapping**

Rewriting the previous plot more concisely yields:

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + 
  geom_point()
```

In the future, you'll also learn about the pipe, \|\>, which will allow you to create that plot with:

```{r}
penguins |> 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) + 
  geom_point()
```

**1.4 Visualizing distributions**

How you visualize the distribution of a variable depends on the type of variable: categorical or numerical.

**1.4.1A  categorical variable**

A variable is **categorical** if it can only take one of a small set of values. To examine the distribution of a categorical variable, you can use a bar chart. The height of the bars displays how many observations occurred with each x value.

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar()
```

In bar plots of categorical variables with non-ordered levels, like the penguin species above, it's often preferable to reorder the bars based on their frequencies. Doing so requires transforming the variable to a factor (how R handles categorical data) and then reordering the levels of that factor.

```{r}
ggplot(penguins, aes(x = fct_infreq(species))) +
  geom_bar()
```

**1.4.2A numerical variable**

A variable is **numerical** (or quantitative) if it can take on a wide range of numerical values, and it is sensible to add, subtract, or take averages with those values. Numerical variables can be continuous or discrete.

One commonly used visualization for distributions of continuous variables is a histogram.

```{r}
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 200)
```

A histogram divides the x-axis into equally spaced bins and then uses the height of a bar to display the number of observations that fall in each bin.

You should always explore a variety of binwidths when working with histograms, as different binwidths can reveal different patterns.

An alternative visualization for distributions of numerical variables is a **density plot**. A density plot is a smoothed-out version of a histogram and a practical alternative, particularly for continuous data that comes from an underlying smooth distribution.

Imagine a histogram made out of wooden blocks. Then, imagine that you drop a cooked spaghetti string over it. The shape the spaghetti will take draped over blocks can be thought of as the shape of the density curve. It shows fewer details than a histogram but can make it easier to quickly glean the shape of the distribution, particularly with respect to modes and skewness.

**1.5 Visualizing relationships**

**1.5.1A numerical and a categorical variable**

To visualize the relationship between a numerical and a categorical variable we can use side-by-side box plots.

-   A box that indicates the range of the middle half of the data, a distance known as the interquartile range (IQR), stretching from the 25th percentile of the distribution to the 75th percentile. In the middle of the box is a line that displays the median, i.e. 50th percentile, of the distribution. These three lines give you a sense of the spread of the distribution and whether or not the distribution is symmetric about the median or skewed to one side.

-   Visual points that display observations that fall more than 1.5 times the IQR from either edge of the box. These outlying points are unusual so are plotted individually.

-   A line (or whisker) that extends from each end of the box and goes to the farthest non-outlier point in the distribution.

````         
```{r}
ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot()
```
````

Figure 1.1: Diagram depicting how a boxplot is created.

Alternatively, we can make density plots with [geom_density()](https://ggplot2.tidyverse.org/reference/geom_density.html).

```{r}
ggplot(penguins, aes(x = body_mass_g, color = species)) +
  geom_density(linewidth = 0.75)
```

Additionally, we can map species to both color and fill aesthetics and use the alpha aesthetic to add transparency to the filled density curves. This aesthetic takes values between 0 (completely transparent) and 1 (completely opaque). In the following plot it's set to 0.5.

```{r}
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
  geom_density(alpha = 0.5)
```

Note the terminology we have used here:

-   We map variables to aesthetics if we want the visual attribute represented by that aesthetic to vary based on the values of that variable.

-   Otherwise, we set the value of an aesthetic.

**1.5.2 Two categorical variables**

We can use stacked bar plots to visualize the relationship between two categorical variables.

The first plot shows the frequencies of each species of penguins on each island.

```{r}
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar()
```

The second plot, a relative frequency plot created by setting position = "fill" in the geom, is more useful for comparing species distributions across islands since it's not affected by the unequal numbers of penguins across the islands.

```{r}
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar(position = "fill")
```

In creating these bar charts, we map the variable that will be separated into bars to the x aesthetic, and the variable that will change the colors inside the bars to the fill aesthetic.

**1.5.3 Two numerical variables**

A scatterplot is probably the most commonly used plot for visualizing the relationship between two numerical variables.

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
```

**1.5.4 Three or more variables**

However adding too many aesthetic mappings to a plot makes it cluttered and difficult to make sense of. Another way, which is particularly useful for categorical variables, is to split your plot into **facets**, subplots that each display one subset of the data.

To facet your plot by a single variable, use [facet_wrap()](https://ggplot2.tidyverse.org/reference/facet_wrap.html). The first argument of [facet_wrap()](https://ggplot2.tidyverse.org/reference/facet_wrap.html) is a formula[3](https://r4ds.hadley.nz/data-visualize#fn3), which you create with \~ followed by a variable name. The variable that you pass to [facet_wrap()](https://ggplot2.tidyverse.org/reference/facet_wrap.html) should be categorical.

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = island))
```

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = species)) +
  facet_wrap(~island)
```

**1.6 Saving your plots**

That's the job of [ggsave()](https://ggplot2.tidyverse.org/reference/ggsave.html), which will save the plot most recently created to disk:

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
ggsave(filename = "penguin-plot.png")
```

If you don't specify the width and height they will be taken from the dimensions of the current plotting device. For reproducible code, you'll want to specify them. You can learn more about [ggsave()](https://ggplot2.tidyverse.org/reference/ggsave.html) in the documentation.

**1.7 Common problems**

As you start to run R code, you're likely to run into problems. Don't worry --- it happens to everyone. We have all been writing R code for years, but every day we still write code that doesn't work on the first try!

ne common problem when creating ggplot2 graphics is to put the + in the wrong place: it has to come at the end of the line, not the start. In other words, make sure you haven't accidentally written code like this:

```{r}
ggplot(data = mpg) 
+ geom_point(mapping = aes(x = displ, y = hwy))
```

**1.8 Summary**

We started with the basic idea that underpins ggplot2: a visualization is a mapping from variables in your data to aesthetic properties like position, color, size and shape. You then learned about increasing the complexity and improving the presentation of your plots layer-by-layer. You also learned about commonly used plots for visualizing the distribution of a single variable as well as for visualizing relationships between two or more variables, by leveraging additional aesthetic mappings and/or splitting your plot into small multiples using faceting.
