{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Titanic machine learning insights from disaster","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-24T05:14:17.832412Z","iopub.execute_input":"2024-10-24T05:14:17.832940Z","iopub.status.idle":"2024-10-24T05:14:17.840920Z","shell.execute_reply.started":"2024-10-24T05:14:17.832897Z","shell.execute_reply":"2024-10-24T05:14:17.839080Z"},"trusted":true},"execution_count":222,"outputs":[]},{"cell_type":"markdown","source":"## Step 1: Load and Explore Data","metadata":{}},{"cell_type":"code","source":"def load_data(train_file, test_file):\n    \"\"\"\n    Load the Titanic dataset.\n    \n    Args:\n    train_file: path to the training dataset\n    test_file: path to the test dataset\n    \n    Returns:\n    df_train: Training DataFrame\n    df_test: Test DataFrame\n    \"\"\"\n    df_train = pd.read_csv(train_file)\n    df_test = pd.read_csv(test_file)\n    \n    print(f\"Training Data Shape: {df_train.shape}\")\n    print(f\"Test Data Shape: {df_test.shape}\")\n    \n    return df_train, df_test","metadata":{"execution":{"iopub.status.busy":"2024-10-24T05:14:17.843985Z","iopub.execute_input":"2024-10-24T05:14:17.844503Z","iopub.status.idle":"2024-10-24T05:14:17.857681Z","shell.execute_reply.started":"2024-10-24T05:14:17.844451Z","shell.execute_reply":"2024-10-24T05:14:17.856400Z"},"trusted":true},"execution_count":223,"outputs":[]},{"cell_type":"markdown","source":"## Step 2: Data Preprocessing","metadata":{}},{"cell_type":"code","source":"def preprocess_data(df_train, df_test):\n    \"\"\"\n    Preprocess the Titanic dataset by handling missing values, feature engineering, and one-hot encoding.\n    \n    Args:\n    df_train: DataFrame containing the training data\n    df_test: DataFrame containing the test data\n    \n    Returns:\n    processed_train: Preprocessed training dataset\n    processed_test: Preprocessed test dataset with PassengerId preserved\n    \"\"\"\n    # Preserve PassengerId for the test dataset\n    passenger_ids = df_test['PassengerId']\n    \n    # Combine the datasets for uniform preprocessing\n    df_test['Survived'] = np.nan\n    df_combined = pd.concat([df_train, df_test], axis=0)\n    \n    # Drop unnecessary columns\n    df_combined = df_combined.drop(['PassengerId', 'Name', 'Ticket'], axis=1)\n    \n    # Handle missing values\n    df_combined['Age'] = df_combined['Age'].fillna(df_combined['Age'].mean())\n    df_combined['Fare'] = df_combined['Fare'].fillna(df_combined['Fare'].mean())\n    df_combined['Embarked'] = df_combined['Embarked'].fillna('S')\n    df_combined['Cabin'] = df_combined['Cabin'].fillna('X000')\n    \n    # Feature Engineering: Cabin letter and cabin number\n    df_combined['cabin_letter'] = df_combined['Cabin'].str.extract(r'([a-zA-Z]+)', expand=False)\n    df_combined['cabin_number'] = df_combined['Cabin'].str.extract(r'(\\d+)', expand=False).fillna(0).astype(int)\n    df_combined = df_combined.drop('Cabin', axis=1)\n\n    # One-hot encoding of categorical variables\n    df_combined = pd.get_dummies(df_combined, columns=['Sex', 'Embarked', 'cabin_letter'], drop_first=True)\n    \n    # Interaction features\n    df_combined['Pclass_bin_Fare'] = df_combined['Fare'] // df_combined['Pclass']\n    df_combined['Pclass_bin_sex'] = df_combined['Pclass'] - df_combined['Sex_male']\n\n    # Split the combined data back into train and test sets\n    processed_train = df_combined[df_combined['Survived'].notna()].copy()\n    processed_test = df_combined[df_combined['Survived'].isna()].copy()\n    \n    # Drop 'Survived' from the test set\n    processed_train['Survived'] = processed_train['Survived'].astype(int)\n    processed_test = processed_test.drop('Survived', axis=1)\n    \n    # Restore PassengerId for the test set\n    processed_test['PassengerId'] = passenger_ids\n    \n    return processed_train, processed_test\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-24T05:14:17.859531Z","iopub.execute_input":"2024-10-24T05:14:17.859971Z","iopub.status.idle":"2024-10-24T05:14:17.874431Z","shell.execute_reply.started":"2024-10-24T05:14:17.859920Z","shell.execute_reply":"2024-10-24T05:14:17.873070Z"},"trusted":true},"execution_count":224,"outputs":[]},{"cell_type":"markdown","source":"## Step 3: Exploratory Data Analysis (EDA) - Key Visualizations","metadata":{}},{"cell_type":"code","source":"def create_key_visualizations(df_train):\n    \"\"\"\n    Generate key visualizations for the Titanic dataset.\n    \n    Args:\n    df_train: DataFrame containing the training data\n    \n    Returns:\n    None (displays plots)\n    \"\"\"\n    # Set plot style\n    sns.set(style=\"whitegrid\")\n\n    # 1. Survival Rate by Gender\n    plt.figure(figsize=(8, 6))\n    sns.barplot(x='Sex', y='Survived', data=df_train)\n    plt.title('Survival Rate by Gender')\n    plt.ylabel('Survival Rate')\n    plt.xlabel('Gender')\n    plt.show()\n\n    # 2. Survival Rate by Passenger Class\n    plt.figure(figsize=(8, 6))\n    sns.barplot(x='Pclass', y='Survived', data=df_train)\n    plt.title('Survival Rate by Passenger Class')\n    plt.ylabel('Survival Rate')\n    plt.xlabel('Passenger Class')\n    plt.show()\n\n    # 3. Age Distribution of Survivors and Non-Survivors\n    plt.figure(figsize=(10, 8))\n    sns.histplot(df_train[df_train['Survived'] == 1]['Age'], bins=20, label='Survived', kde=True, color='green')\n    sns.histplot(df_train[df_train['Survived'] == 0]['Age'], bins=20, label='Did not survive', kde=True, color='red')\n    plt.title('Age Distribution of Survivors and Non-Survivors')\n    plt.xlabel('Age')\n    plt.legend()\n    plt.show()\n\n    # 4. Survival Rate by Embarkation Point\n    plt.figure(figsize=(8, 6))\n    sns.barplot(x='Embarked', y='Survived', data=df_train)\n    plt.title('Survival Rate by Embarkation Point')\n    plt.ylabel('Survival Rate')\n    plt.xlabel('Embarkation Point')\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-24T05:14:17.876731Z","iopub.execute_input":"2024-10-24T05:14:17.877123Z","iopub.status.idle":"2024-10-24T05:14:17.892204Z","shell.execute_reply.started":"2024-10-24T05:14:17.877073Z","shell.execute_reply":"2024-10-24T05:14:17.891180Z"},"trusted":true},"execution_count":225,"outputs":[]},{"cell_type":"markdown","source":"## Step 4: Split the Data and Apply Feature Scaling","metadata":{}},{"cell_type":"code","source":"def split_and_scale_data(processed_train):\n    \"\"\"\n    Split the training data into train and validation sets, and scale the features.\n    \n    Args:\n    processed_train: Preprocessed training dataset\n    \n    Returns:\n    X_train_scaled, X_val_scaled, y_train, y_val: Scaled training and validation features and labels\n    scaler: Fitted scaler object\n    \"\"\"\n    X = processed_train.drop(['Survived'], axis=1)\n    y = processed_train['Survived']\n    \n    # Split the data into training and validation sets\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    # Feature scaling\n    scaler = StandardScaler()\n    X_train_scaled = scaler.fit_transform(X_train)\n    X_val_scaled = scaler.transform(X_val)\n    \n    return X_train_scaled, X_val_scaled, y_train, y_val, scaler\n","metadata":{"execution":{"iopub.status.busy":"2024-10-24T05:14:17.895077Z","iopub.execute_input":"2024-10-24T05:14:17.895602Z","iopub.status.idle":"2024-10-24T05:14:17.908542Z","shell.execute_reply.started":"2024-10-24T05:14:17.895550Z","shell.execute_reply":"2024-10-24T05:14:17.907428Z"},"trusted":true},"execution_count":226,"outputs":[]},{"cell_type":"markdown","source":"## Step 5: Model Training and Tuning","metadata":{}},{"cell_type":"code","source":"# Logistic Regression Model\ndef train_logistic_regression(X_train_scaled, y_train):\n    \"\"\"\n    Train a Logistic Regression model.\n    \n    Args:\n    X_train_scaled: Scaled training features\n    y_train: Training labels\n    \n    Returns:\n    log_model: Trained Logistic Regression model\n    \"\"\"\n    log_model = LogisticRegression(max_iter=1000, random_state=42)\n    log_model.fit(X_train_scaled, y_train)\n    return log_model\n\n# Random Forest Model with Hyperparameter Tuning\ndef tune_random_forest(X_train_scaled, y_train):\n    \"\"\"\n    Perform GridSearchCV to tune Random Forest hyperparameters.\n    \n    Args:\n    X_train_scaled: Scaled training features\n    y_train: Training labels\n    \n    Returns:\n    best_rf_model: Tuned Random Forest model\n    \"\"\"\n    param_grid = {\n        'n_estimators': [190, 200,210 ],\n        'max_depth': [15, 20, 25],\n        'min_samples_split': [1, 2, 3],\n        'min_samples_leaf': [2, 3, 4]\n    }\n    rf = RandomForestClassifier(random_state=42)\n    grid_search = GridSearchCV(rf, param_grid, cv=10, scoring='accuracy', n_jobs=-1, verbose=1)\n    grid_search.fit(X_train_scaled, y_train)\n    print(f\"Best params for Random Forest: {grid_search.best_params_}\")\n    return grid_search.best_estimator_\n\n# XGBoost Model with Hyperparameter Tuning\ndef tune_xgboost(X_train_scaled, y_train):\n    \"\"\"\n    Perform GridSearchCV to tune XGBoost hyperparameters.\n    \n    Args:\n    X_train_scaled: Scaled training features\n    y_train: Training labels\n    \n    Returns:\n    best_xgb_model: Tuned XGBoost model\n    \"\"\"\n    param_grid = {\n        'n_estimators': [100, 150, 200],\n        'max_depth': [3, 4, 5],\n        'learning_rate': [0.04, 0.05, 0.06]\n    }\n    xgb = XGBClassifier(objective='binary:logistic', random_state=42)\n    grid_search = GridSearchCV(xgb, param_grid, cv=10, scoring='accuracy', n_jobs=-1, verbose=1)\n    grid_search.fit(X_train_scaled, y_train)\n    print(f\"Best params for XGBoost: {grid_search.best_params_}\")\n    return grid_search.best_estimator_\n","metadata":{"execution":{"iopub.status.busy":"2024-10-24T05:14:17.964542Z","iopub.execute_input":"2024-10-24T05:14:17.964956Z","iopub.status.idle":"2024-10-24T05:14:17.975172Z","shell.execute_reply.started":"2024-10-24T05:14:17.964918Z","shell.execute_reply":"2024-10-24T05:14:17.974041Z"},"trusted":true},"execution_count":227,"outputs":[]},{"cell_type":"markdown","source":"## Step 6: Feature Importance (Random Forest)","metadata":{}},{"cell_type":"code","source":"def plot_feature_importance(rf_model, X_train):\n    \"\"\"\n    Plot feature importance from the trained Random Forest model.\n    \n    Args:\n    rf_model: Trained Random Forest model\n    X_train: Training dataset (features only, not including target)\n    \n    Returns:\n    None (displays the plot)\n    \"\"\"\n    # Get feature importance from the Random Forest model\n    feature_importance = rf_model.feature_importances_\n    \n    # Create a DataFrame for visualization\n    features = X_train.columns\n    importance_df = pd.DataFrame({\n        'Feature': features,\n        'Importance': feature_importance\n    }).sort_values(by='Importance', ascending=False)\n    \n    # Plot feature importance\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x='Importance', y='Feature', data=importance_df)\n    plt.title('Feature Importance from Random Forest')\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-24T05:14:17.977385Z","iopub.execute_input":"2024-10-24T05:14:17.977748Z","iopub.status.idle":"2024-10-24T05:14:17.992400Z","shell.execute_reply.started":"2024-10-24T05:14:17.977712Z","shell.execute_reply":"2024-10-24T05:14:17.991190Z"},"trusted":true},"execution_count":228,"outputs":[]},{"cell_type":"markdown","source":"## Step 7: Model Evaluation and Best Model Selection","metadata":{}},{"cell_type":"code","source":"def evaluate_models(X_val_scaled, y_val, log_model, rf_model, xgb_model):\n    \"\"\"\n    Evaluate the performance of Logistic Regression, Random Forest, and XGBoost models on the validation set.\n    \n    Args:\n    X_val_scaled: Scaled validation features\n    y_val: Validation labels\n    log_model: Trained Logistic Regression model\n    rf_model: Trained Random Forest model\n    xgb_model: Trained XGBoost model\n    \n    Returns:\n    best_model: Model with the highest validation accuracy\n    \"\"\"\n    # Evaluate Logistic Regression\n    log_pred = log_model.predict(X_val_scaled)\n    log_acc = accuracy_score(y_val, log_pred)\n    print(f\"Logistic Regression Accuracy: {log_acc:.4f}\")\n\n    # Evaluate Random Forest\n    rf_pred = rf_model.predict(X_val_scaled)\n    rf_acc = accuracy_score(y_val, rf_pred)\n    print(f\"Random Forest Accuracy after Tuning: {rf_acc:.4f}\")\n\n    # Evaluate XGBoost\n    xgb_pred = xgb_model.predict(X_val_scaled)\n    xgb_acc = accuracy_score(y_val, xgb_pred)\n    print(f\"XGBoost Accuracy after Tuning: {xgb_acc:.4f}\")\n    \n    # Select the best model based on accuracy\n    best_model = max([(log_model, log_acc), (rf_model, rf_acc), (xgb_model, xgb_acc)], key=lambda x: x[1])[0]\n    print(f\"Best model selected: {best_model}\")\n    \n    return best_model\n","metadata":{"execution":{"iopub.status.busy":"2024-10-24T05:14:17.993906Z","iopub.execute_input":"2024-10-24T05:14:17.994370Z","iopub.status.idle":"2024-10-24T05:14:18.010226Z","shell.execute_reply.started":"2024-10-24T05:14:17.994319Z","shell.execute_reply":"2024-10-24T05:14:18.008962Z"},"trusted":true},"execution_count":229,"outputs":[]},{"cell_type":"markdown","source":"## Step 8: Make Predictions and Save to CSV","metadata":{}},{"cell_type":"code","source":"def make_predictions_and_save_to_csv(model, processed_test, scaler, output_file='submission.csv'):\n    \"\"\"\n    Make predictions on the preprocessed test data and save the submission file as 'submission.csv'.\n    \n    Args:\n    model: Trained model to use for predictions\n    processed_test: Preprocessed test dataset\n    scaler: Fitted scaler object for scaling test features\n    output_file: Filename to save the final predictions (default: 'submission.csv')\n    \n    Returns:\n    None (saves CSV file)\n    \"\"\"\n    # Drop PassengerId from features\n    X_test = processed_test.drop(['PassengerId'], axis=1)\n    \n    # Scale the test data using the same scaler used for training data\n    X_test_scaled = scaler.transform(X_test)\n    \n    # Make predictions on the scaled test data\n    predictions = model.predict(X_test_scaled)\n    \n    # Create a submission DataFrame\n    submission = pd.DataFrame({\n        'PassengerId': processed_test['PassengerId'],\n        'Survived': predictions\n    })\n    \n    # Save the submission file\n    submission.to_csv(output_file, index=False)\n    print(f\"Submission file saved as {output_file}\")\n\n# Usage Example:\n# make_predictions_and_save_to_csv(best_model, processed_test, scaler, 'submission.csv')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-24T05:14:18.011613Z","iopub.execute_input":"2024-10-24T05:14:18.011992Z","iopub.status.idle":"2024-10-24T05:14:18.026587Z","shell.execute_reply.started":"2024-10-24T05:14:18.011954Z","shell.execute_reply":"2024-10-24T05:14:18.025428Z"},"trusted":true},"execution_count":230,"outputs":[]},{"cell_type":"markdown","source":"## Final Main Function\n\nTo put everything together, here’s the final main function that runs the complete process.","metadata":{}},{"cell_type":"code","source":"def main():\n    # Step 1: Load and Explore Data\n    print(\"Step 1: Loading and exploring data...\")\n    df_train, df_test = load_data(\"/kaggle/input/titanic/train.csv\",\n                                  \"/kaggle/input/titanic/test.csv\")\n    \n    # Step 2: Preprocess the Data\n    print(\"Step 2: Preprocessing the data...\")\n    processed_train, processed_test = preprocess_data(df_train, df_test)\n    \n    # Step 3: Exploratory Data Analysis (EDA)\n    print(\"Step 3: Performing EDA...\")\n    create_key_visualizations(df_train)\n    \n    # Step 4: Split and Scale Data\n    print(\"Step 4: Splitting and scaling data...\")\n    X_train_scaled, X_val_scaled, y_train, y_val, scaler = split_and_scale_data(processed_train)\n    \n    # Step 5: Train and Tune Models\n    print(\"Step 5: Training and tuning models...\")\n    log_model = train_logistic_regression(X_train_scaled, y_train)\n    rf_model = tune_random_forest(X_train_scaled, y_train)\n    xgb_model = tune_xgboost(X_train_scaled, y_train)\n    \n    # Step 6: Plot Feature Importance (Random Forest)\n    print(\"Step 6: Plotting feature importance...\")\n    plot_feature_importance(rf_model, processed_train.drop(['Survived'], axis=1))\n    \n    # Step 7: Evaluate Models and Select the Best\n    print(\"Step 7: Evaluating models and selecting the best model...\")\n    best_model = evaluate_models(X_val_scaled, y_val, log_model, rf_model, xgb_model)\n    \n    # Step 8: Make Predictions and Save Submission File\n    print(\"Step 8: Making predictions and saving to CSV...\")\n    make_predictions_and_save_to_csv(best_model, processed_test, scaler, 'submission.csv')\n\n# Run the main function\nif __name__ == '__main__':\n    main()","metadata":{"execution":{"iopub.status.busy":"2024-10-24T05:14:18.028758Z","iopub.execute_input":"2024-10-24T05:14:18.029181Z","iopub.status.idle":"2024-10-24T05:14:21.744019Z","shell.execute_reply.started":"2024-10-24T05:14:18.029140Z","shell.execute_reply":"2024-10-24T05:14:21.742050Z"},"trusted":true},"execution_count":231,"outputs":[{"name":"stdout","text":"Step 1: Loading and exploring data...\nTraining Data Shape: (891, 12)\nTest Data Shape: (418, 11)\nStep 2: Preprocessing the data...\nStep 3: Performing EDA...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Step 4: Splitting and scaling data...\nStep 5: Training and tuning models...\nFitting 10 folds for each of 81 candidates, totalling 810 fits\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[231], line 39\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[38;5;66;03m# Run the main function\u001b[39;00m\n\u001b[1;32m     38\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m---> 39\u001b[0m     \u001b[43mmain\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[231], line 22\u001b[0m, in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mStep 5: Training and tuning models...\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     21\u001b[0m log_model \u001b[38;5;241m=\u001b[39m train_logistic_regression(X_train_scaled, y_train)\n\u001b[0;32m---> 22\u001b[0m rf_model \u001b[38;5;241m=\u001b[39m \u001b[43mtune_random_forest\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train_scaled\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     23\u001b[0m xgb_model \u001b[38;5;241m=\u001b[39m tune_xgboost(X_train_scaled, y_train)\n\u001b[1;32m     25\u001b[0m \u001b[38;5;66;03m# Step 6: Plot Feature Importance (Random Forest)\u001b[39;00m\n","Cell \u001b[0;32mIn[227], line 37\u001b[0m, in \u001b[0;36mtune_random_forest\u001b[0;34m(X_train_scaled, y_train)\u001b[0m\n\u001b[1;32m     35\u001b[0m rf \u001b[38;5;241m=\u001b[39m RandomForestClassifier(random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m42\u001b[39m)\n\u001b[1;32m     36\u001b[0m grid_search \u001b[38;5;241m=\u001b[39m GridSearchCV(rf, param_grid, cv\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m, scoring\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccuracy\u001b[39m\u001b[38;5;124m'\u001b[39m, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m---> 37\u001b[0m \u001b[43mgrid_search\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train_scaled\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     38\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBest params for Random Forest: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mgrid_search\u001b[38;5;241m.\u001b[39mbest_params_\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     39\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m grid_search\u001b[38;5;241m.\u001b[39mbest_estimator_\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:874\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    868\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[1;32m    869\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[1;32m    870\u001b[0m     )\n\u001b[1;32m    872\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[0;32m--> 874\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[1;32m    878\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:1388\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[1;32m   1387\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1388\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:821\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    813\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    814\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\n\u001b[1;32m    815\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFitting \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m folds for each of \u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m candidates,\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    816\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m totalling \u001b[39m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m fits\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m    817\u001b[0m             n_splits, n_candidates, n_candidates \u001b[38;5;241m*\u001b[39m n_splits\n\u001b[1;32m    818\u001b[0m         )\n\u001b[1;32m    819\u001b[0m     )\n\u001b[0;32m--> 821\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[43mparallel\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    822\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdelayed\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_fit_and_score\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    823\u001b[0m \u001b[43m        \u001b[49m\u001b[43mclone\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbase_estimator\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    824\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    825\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    826\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrain\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    827\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtest\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtest\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    828\u001b[0m \u001b[43m        \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    829\u001b[0m \u001b[43m        \u001b[49m\u001b[43msplit_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_splits\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    830\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcandidate_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_candidates\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    831\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_and_score_kwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    832\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    833\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparameters\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mproduct\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    834\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcandidate_params\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msplit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroups\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    835\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    836\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    838\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    839\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    840\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo fits were performed. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    841\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWas the CV iterator empty? \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    842\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWere there no candidates?\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    843\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/parallel.py:63\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     58\u001b[0m config \u001b[38;5;241m=\u001b[39m get_config()\n\u001b[1;32m     59\u001b[0m iterable_with_config \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m     60\u001b[0m     (_with_config(delayed_func, config), args, kwargs)\n\u001b[1;32m     61\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m delayed_func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m iterable\n\u001b[1;32m     62\u001b[0m )\n\u001b[0;32m---> 63\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__call__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43miterable_with_config\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:2007\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   2001\u001b[0m \u001b[38;5;66;03m# The first item from the output is blank, but it makes the interpreter\u001b[39;00m\n\u001b[1;32m   2002\u001b[0m \u001b[38;5;66;03m# progress until it enters the Try/Except block of the generator and\u001b[39;00m\n\u001b[1;32m   2003\u001b[0m \u001b[38;5;66;03m# reaches the first `yield` statement. This starts the asynchronous\u001b[39;00m\n\u001b[1;32m   2004\u001b[0m \u001b[38;5;66;03m# dispatch of the tasks to the workers.\u001b[39;00m\n\u001b[1;32m   2005\u001b[0m \u001b[38;5;28mnext\u001b[39m(output)\n\u001b[0;32m-> 2007\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m output \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreturn_generator \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43moutput\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1650\u001b[0m, in \u001b[0;36mParallel._get_outputs\u001b[0;34m(self, iterator, pre_dispatch)\u001b[0m\n\u001b[1;32m   1647\u001b[0m     \u001b[38;5;28;01myield\u001b[39;00m\n\u001b[1;32m   1649\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend\u001b[38;5;241m.\u001b[39mretrieval_context():\n\u001b[0;32m-> 1650\u001b[0m         \u001b[38;5;28;01myield from\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_retrieve()\n\u001b[1;32m   1652\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mGeneratorExit\u001b[39;00m:\n\u001b[1;32m   1653\u001b[0m     \u001b[38;5;66;03m# The generator has been garbage collected before being fully\u001b[39;00m\n\u001b[1;32m   1654\u001b[0m     \u001b[38;5;66;03m# consumed. This aborts the remaining tasks if possible and warn\u001b[39;00m\n\u001b[1;32m   1655\u001b[0m     \u001b[38;5;66;03m# the user if necessary.\u001b[39;00m\n\u001b[1;32m   1656\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exception \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1762\u001b[0m, in \u001b[0;36mParallel._retrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1757\u001b[0m \u001b[38;5;66;03m# If the next job is not ready for retrieval yet, we just wait for\u001b[39;00m\n\u001b[1;32m   1758\u001b[0m \u001b[38;5;66;03m# async callbacks to progress.\u001b[39;00m\n\u001b[1;32m   1759\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ((\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m\n\u001b[1;32m   1760\u001b[0m     (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mget_status(\n\u001b[1;32m   1761\u001b[0m         timeout\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtimeout) \u001b[38;5;241m==\u001b[39m TASK_PENDING)):\n\u001b[0;32m-> 1762\u001b[0m     \u001b[43mtime\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msleep\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m0.01\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1763\u001b[0m     \u001b[38;5;28;01mcontinue\u001b[39;00m\n\u001b[1;32m   1765\u001b[0m \u001b[38;5;66;03m# We need to be careful: the job list can be filling up as\u001b[39;00m\n\u001b[1;32m   1766\u001b[0m \u001b[38;5;66;03m# we empty it and Python list are not thread-safe by\u001b[39;00m\n\u001b[1;32m   1767\u001b[0m \u001b[38;5;66;03m# default hence the use of the lock\u001b[39;00m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]}]}